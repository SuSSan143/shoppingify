import { useContext, useState } from "react";
import { type NextPage } from "next";
import Head from "next/head";
// import Link from "next/link";
// import { signIn, signOut, useSession } from "next-auth/react";

import { type Data, PrismaClient } from "@prisma/client";

import { Dancing_Script } from "@next/font/google";

import toast, { Toaster } from "react-hot-toast";

import { IoAddOutline } from "react-icons/io5";
import { AiOutlineSearch } from "react-icons/ai";
import { MdOutlineError } from "react-icons/md";

import Overlay from "../components/common/Feedback/Overlay";

import { trpc } from "../utils/trpc";
import { DataContext } from "../context/DataContext";

type HomePageProps = {
  datas: Data[];
};

const dancingScript = Dancing_Script({
  weight: "700",
  subsets: ["latin"],
});

const Home: NextPage<HomePageProps> = ({ datas }) => {
  const [filteringList, setFilteringList] = useState(datas);
  const [search, setSearch] = useState("");
  const dataContext = useContext(DataContext);
  const mutation = trpc.selectedData.addItemToShopingList.useMutation();

  const searchHandler = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearch(e.target.value);
    const filteredList = datas.map((list) => {
      return {
        ...list,
        items: list.items.filter((item) =>
          item.name.toLowerCase().includes(e.target.value.toLowerCase())
        ),
      };
    });
    setFilteringList(filteredList);
  };

  const addItemToShopingList = async (
    item: string,
    name: string,
    id: string
  ) => {
    if (mutation.error) {
      return alert("Something went wrong");
    }
    const itemExist = dataContext?.data
      .find((list) => list.name === name)
      ?.items.map((i) => i.name)
      .includes(item);

    if (!itemExist) {
      const data = dataContext?.data.map((list) => {
        if (
          list.name === name &&
          !list.items.map((i) => i.name).includes(item)
        ) {
          return {
            ...list,
            items: [...list.items, { name: item, count: 1 }],
          };
        }
        return list;
      });
      mutation.mutate({
        id,
        name,
        item,
      });
      return dataContext?.setData(data!);
    }
    return toast.error("Item already exist in the shopping list", {
      position: "bottom-left",
      duration: 3000,
      icon: <MdOutlineError size={"1.3rem"} />,
      style: {
        borderRadius: "10px",
        background: "red",
        color: "#fff",
      },
    });
  };

  return (
    <>
      <Head>
        <title>Shoppingify | Items</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Overlay isShowing={mutation.isLoading} />

      <div className="flex min-h-full flex-1 flex-col gap-12 bg-[#fafafe] px-16 py-8">
        <div className="flex w-full items-center gap-40">
          <h1 className="text-4xl">
            <span className={`${dancingScript.className} text-[#f9a109]`}>
              Shoppingify
            </span>{" "}
            allows you take your shopping list wherever you go
          </h1>

          <div className="relative flex items-start rounded-lg shadow-lg">
            <AiOutlineSearch className="absolute top-4 left-3" size="1.5rem" />
            <input
              className="rounded-lg px-12 py-4 outline-none"
              onChange={searchHandler}
              value={search}
              type="search"
              name="search"
              placeholder="Search Items"
              id="search"
            />
          </div>
        </div>

        <div className="flex max-h-[600px] flex-col gap-10 overflow-y-auto py-2">
          {filteringList?.map((list) => (
            <div key={list?.id} className="flex flex-col gap-7">
              <h3 className="text-2xl">{list?.name}</h3>
              <div className="flex flex-wrap items-center justify-center gap-5 space-x-3">
                {list?.items?.length === 0 &&
                  dataContext?.currentSideBar === "default" && (
                    <h3 className="flex flex-col items-center justify-center gap-3">
                      <span>No items Found</span>
                      <button
                        onClick={() => dataContext?.setCurrentSideBar("add")}
                        className="w-fit rounded-xl bg-[#f9a109] px-4 py-2 text-white"
                      >
                        Add new Item
                      </button>
                    </h3>
                  )}
                {list?.items.map((item, idx: number) => (
                  <div
                    className="flex items-center justify-center gap-3 rounded-md px-4 py-2 shadow-md"
                    key={idx}
                  >
                    {item.name}{" "}
                    <button
                      onClick={() =>
                        addItemToShopingList(item.name, list?.name, list?.id)
                      }
                      title="add-item"
                    >
                      <IoAddOutline size="1.3rem" />
                    </button>
                  </div>
                ))}
              </div>
            </div>
          ))}
        </div>
      </div>
      <Toaster />
    </>
  );
};

export default Home;

export const getServerSideProps = async () => {
  const prisma = new PrismaClient();
  const datas = await prisma.data.findMany();

  return { props: { datas } };
};
